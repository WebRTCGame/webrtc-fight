{"ts":1375317052409,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1375317206085,"patch":[[{"diffs":[[1,"var Hashmap = function Hashmap(map) {\n    Object.call(this, map);\n    this.imap = map || {};\n\n    this.hasProp = function hasProp(prop) {\n        return Object.prototype.hasOwnProperty.call(this.imap, prop);\n    };\n};\nHashmap.prototype = Object.create(Object.prototype, {\n    add: function add(key, value) {\n        if (!this.hasProp(key)) {\n            this.imap[key] = value;\n            return this.imap[key];\n        }\n        else {\n            return this.imap[key];\n        }\n    },\n    addUnSafe: function addUnSafe(key, value) {\n        this.imap[key] = value;\n        return this.imap[key];\n    },\n    change: function change(key, value) {\n        if (this.hasProp(key)) {\n            this.imap[key] = value;\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    get: function get(key) {\n        if (this.hasProp(key)) {\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    keyByValue: function keyByValue(value) {\n        for (var key in this.imap) {\n            if (this.hasProp(key)) {\n                if (this.imap[key] === value) {\n                    return key;\n                }\n            }\n\n        }\n    },\n    define: function define(key, _value, _writeable, _enumerable, _configurable) {\n        if (!this.hasProp(key)) {\n            Object.defineProperty(this.imap, key, {\n                value: _value || undefined,\n                writable: _writeable || true,\n                enumerable: _enumerable || true,\n                configurable: _configurable || true\n            });\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    cloneSafe: function cloneSafe(fromKey, toKey) {\n        if (this.hasProp(fromKey)) {\n            this.add(toKey, Object.clone(this.imap[fromKey]));\n        }\n    },\n    cloneUnsafe: function cloneUnsafe(fromKey, toKey) {\n        if (this.hasProp(fromKey)) {\n            this.addUnSafe(toKey, Object.clone(this.imap[fromKey]));\n        }\n    },\n    addWatch: function addWatch(key, watchName, callback) {\n\n        if (this.hasProp(key)) {\n            Object.defineProperty(this.imap, watchName, {\n                get: function() {\n                    return this.imap[key];\n                },\n                set: function(newValue) {\n                    this.imap[key] = newValue;\n                    callback();\n                },\n                enumerable: true,\n                configurable: true\n            });\n        };\n    },\n    isEnumberable: function isEnumerable(key) {\n        if (this.hasProp(key)) {\n            return Object.getOwnPropertyDescriptor(this.imap, key).enumerable;\n        }\n    },\n    enumerable: function enumerable(key, bool) {\n        if (this.hasProp(key)) {\n            Object.defineProperty(this.imap, key, {\n                value: this.imap[key],\n                enumerable: bool\n            });\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    isWriteable: function isWriteable(key) {\n        if (this.hasProp(key)) {\n            return Object.getOwnPropertyDescriptor(this.imap, key).writeable;\n        }\n    },\n    writeable: function writeable(key, bool) {\n        if (this.hasProp(key)) {\n            Object.defineProperty(this.imap, key, {\n                value: this.imap[key],\n                writable: bool\n            });\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    isConfigurable: function isConfigurable(key) {\n        if (this.hasProp(key)) {\n            return Object.getOwnPropertyDescriptor(this.imap, key).configurable;\n        }\n    },\n    configurable: function configurable(key, bool) {\n        if (this.hasProp(key)) {\n            Object.defineProperty(this.imap, key, {\n                value: this.imap[key],\n                configurable: bool\n            });\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    exists: function exists(key) {\n        return this.hasProp(key);\n    },\n    remove: function remove(key) {\n        if (this.hasProp(key)) {\n            delete this.imap[key];\n        }\n        return undefined;\n    },\n    removeValue: function removeValue(key) {\n        if (this.hasProp(key)) {\n            this.imap[key] = undefined;\n            return this.imap[key];\n        }\n        else {\n            return undefined;\n        }\n    },\n    raw: function raw() {\n        return this.imap;\n    },\n    keys: function keys() {\n        return Object.keys(this.imap);\n    },\n    swap: function swap(key1, key2) {\n        var temp1, temp2;\n        if (this.hasProp(key1)) {\n            if (this.hasProp(key2)) {\n                temp1 = Object.clone(this.imap[key1]);\n                temp2 = Object.clone(this.imap[key2]);\n                this.imap[key1] = temp2;\n                this.imap[key2] = temp1;\n            }\n        }\n    },\n    clear: function clear() {\n        this.imap = {};\n    },\n    getByIndex: function getByIndex(index) {\n        if (this.keys.length > 0) {\n            return this.keys(index);\n        }\n    },\n    indexByValue: function indexByValue() {},\n\n    index: function index(key) {},\n\n    removeByValue: function(value) {\n        for (var key in this.imap) {\n            if (this.hasProp(key)) {\n                if (this.imap[key] === value) {\n                    delete this.imap[key];\n                }\n            }\n\n        }\n    },\n\n    toArray: function toArray() {\n        return this.toString();\n    },\n    descriptor: function descriptor(key) {\n        if (this.hasProp(key)) {\n            return Object.getOwnPropertyDescriptor(this.imap, key);\n        }\n        else {\n            return undefined;\n        }\n    },\n    keysToArray: function keysToArray() {\n        return Object.keys(this.imap);\n    },\n\n    valsToArray: function valsToArray() {},\n\n    toString: function toString() {\n        return JSON.stringify(this.imap);\n    },\n    count: function count() {\n        return this.keys.length;\n    },\n    length: function length() {\n        return this.count();\n    },\n    each: function each(func) {\n        for (var prop in this.imap) {\n            if (this.hasProp(prop)) {\n                func(this.imap[prop]);\n            }\n        }\n    }\n   \n});"]],"start1":0,"start2":0,"length1":0,"length2":6388}]],"length":6388,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375466153633,"patch":[[{"diffs":[[1,"console.log(\"Loaded hashmap.js\");\n"],[0,"var Hashmap "]],"start1":0,"start2":0,"length1":12,"length2":46}]],"length":6422,"saved":false}
{"ts":1375466264503,"patch":[[{"diffs":[[0,"\n   \n});"],[1,"\n\n"]],"start1":6414,"start2":6414,"length1":8,"length2":10}]],"length":6424,"saved":false}
{"ts":1375466345608,"patch":[[{"diffs":[[0,"\");\n"],[-1,"var Hashmap = "],[0,"func"]],"start1":30,"start2":30,"length1":22,"length2":8}]],"length":6410,"saved":false}
{"ts":1375466411299,"patch":[[{"diffs":[[0,"Hashmap("],[-1,"map"],[0,") {\n    "]],"start1":43,"start2":43,"length1":19,"length2":16},{"diffs":[[0,"this"],[-1,", map"],[0,");\n "]],"start1":71,"start2":71,"length1":13,"length2":8},{"diffs":[[0,"ap ="],[-1," map ||"],[0," {};"]],"start1":89,"start2":89,"length1":15,"length2":8}]],"length":6395,"saved":false}
{"ts":1375466495571,"patch":[[{"diffs":[[0,"p.js\");\n"],[1,"\n"],[0,"function"]],"start1":26,"start2":26,"length1":16,"length2":17},{"diffs":[[0,"  };\n};\n"],[1,"\n"],[0,"Hashmap."]],"start1":216,"start2":216,"length1":16,"length2":17}]],"length":6397,"saved":false}
{"contributors":[],"silentsave":false,"ts":1375486738741,"patch":[[{"diffs":[[0,"    };\n}"],[-1,";"],[0,"\n\nHashma"]],"start1":214,"start2":214,"length1":17,"length2":16},{"diffs":[[0,".create("],[-1,"Object.prototype"],[1,"{}"],[0,", {\n    "]],"start1":250,"start2":250,"length1":32,"length2":18},{"diffs":[[0,"       }"],[-1,";"],[0,"\n    },\n"]],"start1":2541,"start2":2541,"length1":17,"length2":16},{"diffs":[[0,"   \n});\n"],[1,"Hashmap.constructor = Hashmap;"],[0,"\n"]],"start1":6372,"start2":6372,"length1":9,"length2":39}]],"length":6411,"saved":false}
{"ts":1375487003645,"patch":[[{"diffs":[[0,"   \n});\n"],[1,"Hashmap.prototype.add = function add() {\n    console.log(\"hashmap add\");\n};\n"],[0,"Hashmap."]],"start1":6372,"start2":6372,"length1":16,"length2":92}]],"length":6487,"saved":false}
{"contributors":[],"silentsave":false,"ts":1376577241104,"patch":[[{"diffs":[[0,");\n\n"],[-1,"function Hashmap() {\n    Object.call(this);\n    this."],[1,"\nvar Hashmap =  {\n    "],[0,"imap"],[-1," = {};\n"],[1,": {},"],[0,"\n    "],[-1,"this."],[0,"hasProp"],[-1," ="],[1,":"],[0," fun"]],"start1":31,"start2":31,"length1":91,"length2":52},{"diffs":[[0,"   }"],[-1,";\n}\n\nHashmap.prototype = Object.create({}, {"],[1,","],[0,"\n   "]],"start1":176,"start2":176,"length1":52,"length2":9},{"diffs":[[0,"  \n}"],[-1,")"],[0,";\n"],[-1,"Hashmap.prototype.add = function add() {\n    console.log(\"hashmap add\");\n};\nHashmap.constructor ="],[1,"\nvar hashmap = new"],[0," Hashmap"],[1,"()"],[0,";\n"]],"start1":6291,"start2":6291,"length1":114,"length2":36}]],"length":6327,"saved":false}
{"ts":1376577319574,"patch":[[{"diffs":[[0," Hashmap"],[-1,"()"],[0,";\n"]],"start1":6315,"start2":6315,"length1":12,"length2":10}]],"length":6325,"saved":false}
{"ts":1376577409850,"patch":[[{"diffs":[[0,"hmap =  "],[1,"function()"],[0,"{\n    im"]],"start1":43,"start2":43,"length1":16,"length2":26},{"diffs":[[0,"imap: {}"],[-1,","],[1,"};\n    Hashmap.prototype = {"],[0,"\n    has"]],"start1":67,"start2":67,"length1":17,"length2":44}]],"length":6362,"saved":false}
{"ts":1376577440536,"patch":[[{"diffs":[[0,"ew Hashmap;\n"],[1,"hashmap.add(\"abc\",5);\n"]],"start1":6350,"start2":6350,"length1":12,"length2":34}]],"length":6384,"saved":false}
{"ts":1376577499755,"patch":[[{"diffs":[[0,"    "],[-1,"imap: {}"],[1,"this.imap =  {};\n    \n    "],[0,"};\n "]],"start1":63,"start2":63,"length1":16,"length2":34}]],"length":6402,"saved":false}
{"ts":1376577532046,"patch":[[{"diffs":[[0,"bc\",5);\n"],[1,"console.log(hashmap.get(\"abc\"));\n"]],"start1":6394,"start2":6394,"length1":8,"length2":41}]],"length":6435,"saved":false}
{"ts":1376577796195,"patch":[[{"diffs":[[0,"et(\"abc\"));\n"],[1,"hashmap.each(function(x){x = x + 1});\nconsole.log(hashmap.get(\"abc\"));\n"]],"start1":6423,"start2":6423,"length1":12,"length2":83}]],"length":6506,"saved":false}
{"ts":1376577837889,"patch":[[{"diffs":[[0,"in this.imap) {\n"],[1,"            console.log(prop);\n"],[0,"            if ("]],"start1":6222,"start2":6222,"length1":32,"length2":63}]],"length":6537,"saved":false}
{"ts":1376578158071,"patch":[[{"diffs":[[0,"(x){"],[-1,"x = x + 1}"],[1,"\n    console.log(x);\n    x = x + 1;\n    console.log(x);\n}\n"],[0,");\nc"]],"start1":6487,"start2":6487,"length1":18,"length2":66}]],"length":6585,"saved":false}
{"ts":1376578202850,"patch":[[{"diffs":[[0," x + 1;\n"],[1,"    return x;\n"],[0,"    cons"]],"start1":6519,"start2":6519,"length1":16,"length2":30}]],"length":6599,"saved":false}
{"ts":1376578225242,"patch":[[{"diffs":[[0,"console.log("],[1,"\"--\" + "],[0,"x);\n    x = "]],"start1":6496,"start2":6496,"length1":24,"length2":31},{"diffs":[[0,"ole.log("],[1,"\"--\" + "],[0,"x);\n}\n);"]],"start1":6556,"start2":6556,"length1":16,"length2":23}]],"length":6613,"saved":false}
{"ts":1376578289960,"patch":[[{"diffs":[[0,"        "],[1," this.imap[prop] ="],[0," func(th"]],"start1":6314,"start2":6314,"length1":16,"length2":34},{"diffs":[[0," 1;\n"],[-1,"    return x;\n"],[0,"    "]],"start1":6548,"start2":6548,"length1":22,"length2":8},{"diffs":[[0,"\" + x);\n"],[1,"    return x;\n   \n"],[0,"}\n);\ncon"]],"start1":6571,"start2":6571,"length1":16,"length2":34}]],"length":6635,"saved":false}
{"ts":1376578385707,"patch":[[{"diffs":[[0,"                "],[1,"//"],[0,"this.imap[prop] "]],"start1":6307,"start2":6307,"length1":32,"length2":34},{"diffs":[[0,"map[prop]);\n"],[1,"                this.change(this.imap[prop],func(this.imap[prop]));\n"],[0,"            "]],"start1":6354,"start2":6354,"length1":24,"length2":92}]],"length":6705,"saved":false}
{"ts":1376578460518,"patch":[[{"diffs":[[0,"    "],[-1,"//"],[0,"this"]],"start1":6319,"start2":6319,"length1":10,"length2":8},{"diffs":[[0,"            "],[1,"//"],[0,"this.change("]],"start1":6368,"start2":6368,"length1":24,"length2":26}]],"length":6705,"saved":false}
{"ts":1376578486238,"patch":[[{"diffs":[[0,"   console.log(\""],[-1,"--"],[1,"aa"],[0,"\" + x);\n    x = "]],"start1":6581,"start2":6581,"length1":34,"length2":34}]],"length":6705,"saved":false}
{"ts":1376578815979,"patch":[[{"diffs":[[0," Hashmap"],[1,"()"],[0,";\nhashma"]],"start1":6489,"start2":6489,"length1":16,"length2":18}]],"length":6707,"saved":false}
{"ts":1376581801869,"patch":[[{"diffs":[[0,"op(prop)) {\n"],[1,"                \n"],[0,"            "]],"start1":6295,"start2":6295,"length1":24,"length2":41}]],"length":6724,"saved":false}
