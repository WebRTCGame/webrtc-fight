{"ts":1376762149148,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Normalize the browser animation API across implementations. This requests\n * the browser to schedule a repaint of the window for the next animation frame.\n * Checks for cross-browser support, and, failing to find it, falls back to setTimeout.\n * @param {function}    callback  Function to call when it's time to update your animation for the next repaint.\n * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation.\n * @return {number} Animation frame request.\n */\nif (!window.requestAnimationFrame) {\n  window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||\n                                  window.mozRequestAnimationFrame ||\n                                  window.msRequestAnimationFrame ||\n                                  window.oRequestAnimationFrame ||\n                                  function (callback) {\n                                    return window.setTimeout(callback, 17 /*~ 1000/60*/);\n                                  });\n}\n\n/**\n * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec.\n *\n * Cancels an animation frame request.\n * Checks for cross-browser support, falls back to clearTimeout.\n * @param {number}  Animation frame request.\n */\nif (!window.cancelAnimationFrame) {\n  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||\n                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||\n                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||\n                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||\n                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||\n                                 window.clearTimeout);\n}\n\n/* Object that contains our utility functions.\n * Attached to the window object which acts as the global namespace.\n */\nwindow.utils = {};\n\n/**\n * Keeps track of the current mouse position, relative to an element.\n * @param {HTMLElement} element\n * @return {object} Contains properties: x, y, event\n */\nwindow.utils.captureMouse = function (element) {\n  var mouse = {x: 0, y: 0, event: null},\n      body_scrollLeft = document.body.scrollLeft,\n      element_scrollLeft = document.documentElement.scrollLeft,\n      body_scrollTop = document.body.scrollTop,\n      element_scrollTop = document.documentElement.scrollTop,\n      offsetLeft = element.offsetLeft,\n      offsetTop = element.offsetTop;\n  \n  element.addEventListener('mousemove', function (event) {\n    var x, y;\n    \n    if (event.pageX || event.pageY) {\n      x = event.pageX;\n      y = event.pageY;\n    } else {\n      x = event.clientX + body_scrollLeft + element_scrollLeft;\n      y = event.clientY + body_scrollTop + element_scrollTop;\n    }\n    x -= offsetLeft;\n    y -= offsetTop;\n    \n    mouse.x = x;\n    mouse.y = y;\n    mouse.event = event;\n  }, false);\n  \n  return mouse;\n};\n\n/**\n * Keeps track of the current (first) touch position, relative to an element.\n * @param {HTMLElement} element\n * @return {object} Contains properties: x, y, isPressed, event\n */\nwindow.utils.captureTouch = function (element) {\n  var touch = {x: null, y: null, isPressed: false, event: null},\n      body_scrollLeft = document.body.scrollLeft,\n      element_scrollLeft = document.documentElement.scrollLeft,\n      body_scrollTop = document.body.scrollTop,\n      element_scrollTop = document.documentElement.scrollTop,\n      offsetLeft = element.offsetLeft,\n      offsetTop = element.offsetTop;\n\n  element.addEventListener('touchstart', function (event) {\n    touch.isPressed = true;\n    touch.event = event;\n  }, false);\n\n  element.addEventListener('touchend', function (event) {\n    touch.isPressed = false;\n    touch.x = null;\n    touch.y = null;\n    touch.event = event;\n  }, false);\n  \n  element.addEventListener('touchmove', function (event) {\n    var x, y,\n        touch_event = event.touches[0]; //first touch\n    \n    if (touch_event.pageX || touch_event.pageY) {\n      x = touch_event.pageX;\n      y = touch_event.pageY;\n    } else {\n      x = touch_event.clientX + body_scrollLeft + element_scrollLeft;\n      y = touch_event.clientY + body_scrollTop + element_scrollTop;\n    }\n    x -= offsetLeft;\n    y -= offsetTop;\n    \n    touch.x = x;\n    touch.y = y;\n    touch.event = event;\n  }, false);\n  \n  return touch;\n};\n\n/**\n * Returns a color in the format: '#RRGGBB', or as a hex number if specified.\n * @param {number|string} color\n * @param {boolean=}      toNumber=false  Return color as a hex number.\n * @return {string|number}\n */\nwindow.utils.parseColor = function (color, toNumber) {\n  if (toNumber === true) {\n    if (typeof color === 'number') {\n      return (color | 0); //chop off decimal\n    }\n    if (typeof color === 'string' && color[0] === '#') {\n      color = color.slice(1);\n    }\n    return window.parseInt(color, 16);\n  } else {\n    if (typeof color === 'number') {\n      color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'\n * @param {number|string} color\n * @param {number}        alpha\n * @return {string}\n */\nwindow.utils.colorToRGB = function (color, alpha) {\n  //number in octal format or string prefixed with #\n  if (typeof color === 'string' && color[0] === '#') {\n    color = window.parseInt(color.slice(1), 16);\n  }\n  alpha = (alpha === undefined) ? 1 : alpha;\n  //parse hex values\n  var r = color >> 16 & 0xff,\n      g = color >> 8 & 0xff,\n      b = color & 0xff,\n      a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);\n  //only use 'rgba' if needed\n  if (a === 1) {\n    return \"rgb(\"+ r +\",\"+ g +\",\"+ b +\")\";\n  } else {\n    return \"rgba(\"+ r +\",\"+ g +\",\"+ b +\",\"+ a +\")\";\n  }\n};\n\n/**\n * Determine if a rectangle contains the coordinates (x,y) within it's boundaries.\n * @param {object}  rect  Object with properties: x, y, width, height.\n * @param {number}  x     Coordinate position x.\n * @param {number}  y     Coordinate position y.\n * @return {boolean}\n */\nwindow.utils.containsPoint = function (rect, x, y) {\n  return !(x < rect.x ||\n           x > rect.x + rect.width ||\n           y < rect.y ||\n           y > rect.y + rect.height);\n};\n\n/**\n * Determine if two rectangles overlap.\n * @param {object}  rectA Object with properties: x, y, width, height.\n * @param {object}  rectB Object with properties: x, y, width, height.\n * @return {boolean}\n */\nwindow.utils.intersects = function (rectA, rectB) {\n  return !(rectA.x + rectA.width < rectB.x ||\n           rectB.x + rectB.width < rectA.x ||\n           rectA.y + rectA.height < rectB.y ||\n           rectB.y + rectB.height < rectA.y);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":6829}]],"length":6829}
